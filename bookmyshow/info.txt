FUNCTIONAL REQUIREMENTS:
customer:
1. search movie/concerts
2. select theatre with time
3. book/cancel movie tickets
4. set location
5. list bookings
admin:
add movie/concerts

NON FUNCTIONAL REQUIREMENTS:
consistent
fault tolerant
available

use redis locking for optimistic locking

DATABASE:
users:
user_id, name, email

index on theatre table based on location
theatre:
theatre_id,name,location

Index on theatre_id, show_time for fast filtering
show:
show_id,movie_id,theatre_id, show_time,screen_id

screen:
screen_id, bookedSeatCount

seats_data:
seat_id,screen_id,seat_number,seat_status

booking:
booking_id, user_id,show_id, booking_time,payment_status

booking_seats:
booking_id,seat_id


• A relational database works well with read-heavy and write less frequently workflow. This is because the number of users who visit the hotel website/apps is a few orders of magnitude higher than those who actually make reservations. NoSQL databases
are generally optimized for writes and the relational database works well enough for read-heavy workflow.
• A relational database provides ACID (atomicity, consistency, isolation, durability) guarantees. ACID properties are important for a reservation system. Without those properties, it's not easy to prevent problems such as negative balance, double charge, double reservations, etc. ACID properties mal<:e application code a lot simpler and
make the whole system easier to reason about. A relational database usually provides these guarantees.
• A relational database can easily model the data. The structure of the business data is very clear and the relationship between different entities (hotel, room, room_type, etc) is stable. This kind of data model is easily modeled by a relational database.



Hybrid Approach
1️⃣ Use Redis for temporary seat locks (Pessimistic Locking) to prevent concurrent booking attempts.
2️⃣ Use Optimistic Locking in SQL to ensure no conflicts happen at confirmation time.
3️⃣ If a payment fails or the TTL expires, release the seat back to availability.


How the Hybrid System Works
Movie Search (Elasticsearch)

User searches → Query Elasticsearch.
Elasticsearch returns relevant theaters & shows.
UI fetches real-time seat availability from SQL.
Seat Booking (SQL & Redis)

User selects seats.
Redis locks the seat (SETNX).
Payment processed.
If successful → Seat status in SQL updated.
Else → Lock expires, seat becomes available.

elasticsearch table structure:
{
  "show_id": "SHOW12345",
  "movie": {
    "movie_id": "MOV789",
    "title": "Dune: Part Two",
    "genre": ["Sci-Fi", "Action"],
    "language": "English",
    "duration_minutes": 165
  },
  "theater": {
    "theater_id": "THEATRE001",
    "name": "IMAX Mumbai",
    "location": "Mumbai, India"
  },
  "screen": {
    "screen_id": "SCREEN1",
    "total_seats": 200,
    "available_seats": 150,
    "booked_seats": ["A1", "A2", "B5", "B6"]
  },
  "show_time": "2025-03-10T19:30:00Z",
  "price_per_ticket": 500
}
