Client A Sends a Message to the Chat Service:


1. After Client A starts, it sends a WebSocket request to our Chat Service;
2. After the Load Balancer receives the request, it forwards the request to a specific Chat Service, and Client A establishes a connection with this Chat Server. A Chat Server maintains one WebSocket connection for each client.
3. Client A sends messages (send_message action) through the WebSocket connection.
4. The Chat Server asks the ID generator for a unique id for the message;
5. The Chat Server writes the message into the message table and inbox table and isDelivered is marked as false
6. chat server uses the redis connection cache to deliver to message to all the user websocket endpoints
7. when recipient reads the message, it sends the ack back to the chat server using which sender can know that message was read and isDelivered is marked as true(this entry can be removed)



Delivering the Message to Client B (Offline):
1. Client B comes online and establishes a WebSocket connection with the server.
2. After a secure WebSocket connection is established, the Chat Server checks Client B's "inbox" in the cache for any undelivered messages.
3. If undelivered messages are found(isDelivered as false), the Chat Service sends these messages to Client B over the WebSocket connection.
4. Upon receiving the messages, Client B sends a message_delivered notification back to the server, confirming successful message reception.
5. After the server receives the message_delivered notification, it updates the status in the Message Database from undelivered to delivered and also removes the corresponding messages from the Inbox in the cache.