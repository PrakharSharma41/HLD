publish 
import pika

# Connect to RabbitMQ server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Declare a queue (ensures it exists)
channel.queue_declare(queue='task_queue', durable=True)

# Publish a message
message = "Hello, RabbitMQ!"
channel.basic_publish(
    exchange='',
    routing_key='task_queue',
    body=message,
    properties=pika.BasicProperties(delivery_mode=2)  # Make message persistent
)

print(f" [x] Sent '{message}'")

# Close the connection
connection.close()

consume

import pika

# Connect to RabbitMQ server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Declare the same queue to ensure it exists
channel.queue_declare(queue='task_queue', durable=True)

# Define callback function to process messages
def callback(ch, method, properties, body):
    print(f" [x] Received {body.decode()}")
    ch.basic_ack(delivery_tag=method.delivery_tag)  # Acknowledge message

# Consume messages from the queue
channel.basic_consume(queue='task_queue', on_message_callback=callback)

print(" [*] Waiting for messages. To exit press CTRL+C")
channel.start_consuming()