<dependency>
    <groupId>com.rabbitmq</groupId>
    <artifactId>amqp-client</artifactId>
    <version>5.16.0</version>
</dependency>

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

public class Producer {
    private static final String QUEUE_NAME = "task_queue";

    public static void main(String[] args) {
        try {
            // Create a connection to RabbitMQ server
            ConnectionFactory factory = new ConnectionFactory();
            factory.setHost("localhost");  // RabbitMQ server
            try (Connection connection = factory.newConnection();
                 Channel channel = connection.createChannel()) {

                // Declare a queue (ensuring it exists)
                boolean durable = true;  // Make queue persistent
                channel.queueDeclare(QUEUE_NAME, durable, false, false, null);

                // Publish a message
                String message = "Hello, RabbitMQ!";
                channel.basicPublish("", QUEUE_NAME, 
                    new com.rabbitmq.client.AMQP.BasicProperties.Builder()
                        .deliveryMode(2)  // Make message persistent
                        .build(),
                    message.getBytes("UTF-8"));

                System.out.println(" [x] Sent '" + message + "'");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

import com.rabbitmq.client.*;

public class Consumer {
    private static final String QUEUE_NAME = "task_queue";

    public static void main(String[] args) {
        try {
            // Create connection to RabbitMQ
            ConnectionFactory factory = new ConnectionFactory();
            factory.setHost("localhost");  // RabbitMQ server
            Connection connection = factory.newConnection();
            Channel channel = connection.createChannel();

            // Declare queue to ensure it exists
            boolean durable = true;
            channel.queueDeclare(QUEUE_NAME, durable, false, false, null);

            System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

            // Define callback for processing messages
            DeliverCallback deliverCallback = (consumerTag, delivery) -> {
                String message = new String(delivery.getBody(), "UTF-8");
                System.out.println(" [x] Received '" + message + "'");

                // Acknowledge message
                channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
            };

            // Start consuming messages (autoAck = false for manual acknowledgment)
            boolean autoAck = false;
            channel.basicConsume(QUEUE_NAME, autoAck, deliverCallback, consumerTag -> {});

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
