functional requirements:

1. Users should be able to create posts.
2. Users should be able to friend/follow people.
3. user can publish and see friends posts

Non functional requirements:
1. The system should be highly available (prioritizing availability over consistency). We'll tolerate up to 1 minute of post staleness (eventual consistency).
2. Posting and viewing the feed should be fast, returning in < 500ms.
3. The system should be able to handle a massive number of users (2B).

how many friends a user can have?: 5000
what is traffic volume: 10 million dau
can contain both text and image

API:
1. POST /posts 
{
    "content": { }
}

2. PUT /users/[id]/followers By using PUT we can ensure it is idempotent

3. GET /feed?pageSize={size}&cursor={timestamp?} paginate
{
    items: Post[],
    nextCursor: string
}


Fanout service:

Fanout on read. The news feed is generated during read time. This is an on-demand model. Recent posts are pulled when a user loads her home page.
Fanout on write. With this approach, news feed is pre-computed during write time. A new post is delivered to friendsâ€™ cache immediately after it is published.
We adopt a hybrid approach to get benefits of both approaches and avoid pitfalls in them. Since fetching the news feed fast is crucial, we use a push model for the majority of users. 
For celebrities or users who have many friends/followers, we let followers pull news content on-demand to avoid system overload. 


database:

user: sql
user_id, user_name

friends:
userFollowing,userFollowed
userFollowed as sk, userFollowing as pk
create gsi on userFollowing as pk and userFollowed as sk

posts: dynamodb 
post_id,post_details,created_at, created_by
post_id as pk and created_at as sk
createdby as gsi created_at at sk

pre_computed_feed:
user_id,created_at, post_id
user_id as pk, created_at as sk