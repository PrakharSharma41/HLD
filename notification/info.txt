https://blog.algomaster.io/p/design-a-scalable-notification-service
functional requirements:
1. what types of notifications? push/sms/email
2. supported devices: ios/android
3. Multiple Notification Types: Support transactional (e.g., order confirmation), promotional (e.g., discount offers), and system-generated alerts (e.g., password reset).
4. Scheduled Delivery: Support scheduling of notifications for future delivery.
5. Rate Limiting: Ensure that users receive only a limited number of promotional messages in a given day to prevent spam.
6. Retry Mechanism: Handle notification delivery failures, retrying when necessary (e.g., failed SMS or email).


non functional requirements:
1. reliable, should send notification, prevent data loss of failed notification
2. rate limiting, not overload the customer with too many notification(can be done by notification servers)
3. scalable


API:
POST /api/v1/sendNotification
{
  "requestId": "abc123",
  "timestamp": "2024-09-17T14:00:00Z",
  "notificationType": "transactional",
  "channels": ["email", "sms", "push"],
  "recipient": {
    "userId": "user789",
    "email": "user@example.com"
  },
  "message": {
    "subject": "Order Confirmation",
    "body": "Thank you for your order! Your order #123456 has been confirmed.",
    "attachments": ["https://example.com/invoice123456.pdf"],
    "smsText": "Thank you for your order! Order #123456 confirmed.",
    "pushNotification": {
      "title": "Order Confirmed",
      "body": "Your order #123456 has been confirmed. Check your email for details.",
      "icon": "https://example.com/icon.png",
      "action": {
        "type": "viewOrder",
        "url": "https://example.com/order/123456"
      }
    }
  },
  "schedule": {
    "sendAt": "2024-09-17T15:00:00Z"
  },
  "metadata": {
    "priority": "high",
    "retries": 3
  }
}

database:
if high volume, we can use cassandra as well 

user:
user_id,email_id, country

user_preferences:
user_id,preferences(json)

device:
user_id, device_id

notification log:
notification_id, device_id, retry_count,user_id,last_updated,status: success/failed

scheduled_notificaion:
notification_id,scheduled_time,message,retry_left,status:success/failed
partitioned based on scheduled_time

sample response from user preference service:
{
  "userId": "user789",
  "preferences": {
    "channels": {
      "transactional": ["email", "push"],
      "promotional": ["sms"],
      "systemAlert": ["push", "sms"]
    },
    "doNotDisturb": {
      "enabled": true,
      "startTime": "22:00",
      "endTime": "08:00",
      "timezone": "America/New_York"
    },
    "dailyLimits": {
      "promotionalLimit": 2,
      "promotionalSentToday": 1
    },
    "optOut": {
      "email": false,
      "sms": false,
      "push": false
    },
    "preferredTimeForDelivery": {
      "enabled": true,
      "startTime": "09:00",
      "endTime": "21:00",
      "timezone": "America/New_York"
    }
  }
}

step3: 
scalability ,prevent data loss

When a notification event first arrives, we check if it is seen before by checking the event ID. If it is seen before, it is discarded.

scalability:
Notification templates are introduced to avoid building every notification from scratch. A notification template is a preformatted notification to create your unique notification by customizing parameters, styling, tracking links, etc. 
rate limiting at notification servers

email apn could be mailchimp
message apn could be twilio

for scheduled notificaion:
The Scheduler Service is responsible for storing and tracking the scheduled notificationsâ€”notifications that need to be sent at a specific future time.
queries scheduled_notificaion table continuously based on time

user preference service:
The User Preference Service allows users to control how they receive notifications.

It stores and retrieves individual user preferences for receiving notifications across different channels.
example:
{
  "requestId": "abc123",
  "timestamp": "2024-09-17T14:00:00Z",
  "notificationType": "transactional",
  "channels": ["email", "sms", "push"],
  "recipient": {
    "userId": "user789",
    "email": "user@example.com"
  },
  "message": {
    "subject": "Order Confirmation",
    "body": "Thank you for your order! Your order #123456 has been confirmed.",
    "attachments": ["https://example.com/invoice123456.pdf"],
    "smsText": "Thank you for your order! Order #123456 confirmed.",
    "pushNotification": {
      "title": "Order Confirmed",
      "body": "Your order #123456 has been confirmed. Check your email for details.",
      "icon": "https://example.com/icon.png",
      "action": {
        "type": "viewOrder",
        "url": "https://example.com/order/123456"
      }
    }
  }
}
user preferences can be nosql db based on user_id as key