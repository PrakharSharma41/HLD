Functional requirements:

1. The rate limiter should be flexible enough to support different sets of throttle rules. like based on ip, user id or others
2. inform users when throttled
3. user gets 429 response on being throttled

Non functional requirements:
1. scalable
2. fault tolerant
3. handles race condition(in distributed environments)
4. synchronization(in distributed environments)

algo to be used
token bucket (keep tweeking size of bucket with high loads)
fixed counter
sliding counter

https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/

Handle race conditions:
clients are interacting with multiple rate limiters instance that connects to redis
1. we can either use locks to ensure synchronization 
2. use sorted sets in redis

some examples of rate limiting rules:
domain: messaging 
descriptors:
-   key: message_type  
    Value: marketing 
    rate_limit:
        unit: day 
        requests_per_unit: 5