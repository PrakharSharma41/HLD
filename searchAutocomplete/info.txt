Functional requirements:
1. when typing in the text box quickly load the top suggestions for word/terms based off input text.
2. suggestions may be either for individual words or full search terms.
3. top terms list should be updated at least once per day.

Non functional requirements:
1. Availability: The system should be highly available and aim for near-zero downtime. The system should have error handling mechanisms to prevent crashes and ensure it can handle large amounts of traffic.
2. Scalability: The system should support 100 million daily users.
3. Latency: The system should provide search suggestions in real-time (within a few hundred milliseconds).
4. Efficiency: The system should efficiently use memory and computational resources.
5. Consistency: Since the system will be read-only for the clients, consistency is not a primary concern,2 people can see different results

API:
GET /suggestions?q={search-term}
{
    "suggestions": ["suggestion1", "suggestion2", ..., "suggestionn"]
}

we can use tries for solving this optimally, it takes o(1) for reads since we just have to
go down in children node
in tries we store top k suggestions at each node 

• Users may enter billions of queries per day. Updating the trie on every query significantly slows down the query service.
• Top suggestions may not change much once the trie is built. Thus, it is unnecessary to update the trie frequently.

we can store trie in 2 ways:
1. document store: take snapshot, serialize it and store it
2. key value store: 
• Every prefix in the trie is mapped to a key in a hash table.
• Data on each trie node is mapped to a value in a hash table.

we can add a filter layer between api servers and trie cache to filter out abusive content.

we can shard the data based on keys and to prevent hot partitioning, we can use historical patterns to make sure that shards are evenly distributed

we can use redis also where key will be prefix and value will be sorted set of strings with their count 
we can backup the data in key value store

debouncing?
can be used so that search query is not fired for each character, instead it can skip some characters(from frontend side)
