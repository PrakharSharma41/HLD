1. subscription_config
Holds definitions for all subscription tiers: thresholds, prices, and benefits.
CREATE TABLE subscription_config (
    tier_id SERIAL PRIMARY KEY,
    tier_name VARCHAR(50) UNIQUE NOT NULL,       -- e.g., 'Silver', 'Gold', 'Platinum'
    min_cart_amount DECIMAL(12,2) NOT NULL,     -- lower threshold
    max_cart_amount DECIMAL(12,2),              -- upper threshold (NULL means ∞)
    price DECIMAL(12,2) NOT NULL,
    duration_days INT NOT NULL,                 -- validity period
    benefits JSONB NOT NULL,                    -- perks: discounts, free delivery, etc.
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

2. user_subscription
Stores each user’s current subscription, tracks lifecycle state.
CREATE TABLE user_subscription (
    subscription_id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL UNIQUE,            -- 1 active subscription per user
    tier_id INT NOT NULL REFERENCES subscription_config(tier_id),
    tier_name VARCHAR(50) NOT NULL,            -- denormalized for faster lookups
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status VARCHAR(20) NOT NULL CHECK (status IN ('ACTIVE', 'CANCELED', 'EXPIRED')),
    auto_renewal BOOLEAN DEFAULT FALSE,
    last_updated TIMESTAMP DEFAULT NOW()
);

3. subscription_history (optional)
Keeps all past subscription records (activations, renewals, upgrades, cancellations) for compliance and customer service.
CREATE TABLE subscription_history (
    history_id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    tier_id INT NOT NULL REFERENCES subscription_config(tier_id),
    tier_name VARCHAR(50) NOT NULL,
    action VARCHAR(30) NOT NULL,               -- 'ACTIVATED', 'CANCELED', 'RENEWED', etc.
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status_at_end VARCHAR(20) NOT NULL,        -- e.g., 'EXPIRED', 'CANCELED'
    created_at TIMESTAMP DEFAULT NOW()
);

SQL is preffered here:
1. Strong relationships & consistency
2. Transactional updates:
Activating a subscription, updating user profiles, and writing audit history must happen together or not at all → classic multi-step transactions → best done in SQL RDBMS.
3. Relatively low write volume(even in large ecommerce)
