https://github.com/karanpratapsingh/system-design#twitter

FUNCTIONAL REQUIREMENTS:
Should be able to post new tweets (can be text, image, video, etc.).
Should be able to follow other users.
Should have a newsfeed feature consisting of tweets from the people the user is following.
Should be able to search tweets.
should be able to comment on tweet

NON FUNCTIONAL REQUIREMENTS:
High availability with minimal latency.
The system should be scalable and efficient.

DATABASE:

we can store tweets and users information in nosql database
store followers data in graph database
we can shard data based on user_id because if a user want to see tweets of followers, service can search for shard containing 
that follower id

Graph db issues:
1. Graph DBs like Neo4j are optimized for local graph traversals on a single machine or small cluster,
2. Graph depth grows exponentially
    2.1 1st degree: 1 million nodes (followers).
    2.2 2nd degree: potentially billions (if each follower follows 1000 users).
    2.3 You canâ€™t realistically compute or store this dynamically in a user-facing request.

user: relational data for users
user_id, name, email

follower: use graph db or cassandra
follower_id, followee_id

tweet: use nosql, it has hihg write rate
activity_id, user_id, activity_time,created_at

comment: use nosql, it has hihg write rate
activity_id, user_id,activity_time

activity_likes: can use cassandra here with counter value
activity_id,like_count



Retweets
Retweets are one of our extended requirements. To implement this feature, we can simply create a new tweet with the user id of the user retweeting the original tweet and
then modify the type enum and content property of the new tweet to link it with the original tweet.

